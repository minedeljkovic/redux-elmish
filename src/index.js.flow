// @flow

declare export function assertNever<T>(impossible: empty): T;

export type PromiseEffect<TAction, TPromiseResult> = {
  type: 'PROMISE',
  factory: () => Promise<TPromiseResult>,
  successTagger: (result: TPromiseResult) => TAction,
  failTagger: (error: any) => TAction
};

export type NoneEffect = {
  type: 'NONE'
};

export type MappedEffect<TAction, TTaggedAction> = {
  type: 'MAP',
  effect: Effect<TTaggedAction>,
  tagger: (action: TTaggedAction) => TAction
};

export type BatchEffect<TAction> = {
  type: 'BATCH',
  effects: Effect<TAction>[]
};

export type Effect<TAction> = PromiseEffect<TAction, *> | NoneEffect | MappedEffect<TAction, *> | BatchEffect<TAction>;

declare export var Effects: {
  promise: <TAction, TPromiseResult>(promiseFactory: () => Promise<TPromiseResult>, successTagger: (result: TPromiseResult) => TAction, failTagger: (error: any) => TAction) => Effect<TAction>,
  none: () => NoneEffect,
  map: <TAction, TTagAction>(effect: Effect<TAction>, tagger: (action: TAction) => TTagAction) => Effect<TTagAction>,
  batch: <TAction>(effects: Effect<TAction>[]) => Effect<TAction>
};

declare export function isEffect(object: any): boolean;

export type Dispatch<TAction> = (action: TAction) => void;

declare export function forwardTo<TParentAction, TChildAction>(dispatch: Dispatch<TParentAction>, map: (childAction: TChildAction) => TParentAction): Dispatch<TChildAction>;

export type PureView<Props> = Class<React$Component<Props, void>>;

type ViewClass = <P, C: React$Component<P, any>>(
  Komponent: Class<C>
) => Class<React$Component<P, any>>;

type ViewStateless = <P>(component: (props: P) => any) => PureView<P>;

declare export var view: ViewStateless & ViewClass;
